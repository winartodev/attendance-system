// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/winartodev/attencande-system/ent/attendance"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID int64 `json:"employee_id,omitempty"`
	// ClockedIn holds the value of the "clocked_in" field.
	ClockedIn time.Time `json:"clocked_in,omitempty"`
	// ClockedOut holds the value of the "clocked_out" field.
	ClockedOut time.Time `json:"clocked_out,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID, attendance.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case attendance.FieldClockedIn, attendance.FieldClockedOut:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attendance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case attendance.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				a.EmployeeID = value.Int64
			}
		case attendance.FieldClockedIn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field clocked_in", values[i])
			} else if value.Valid {
				a.ClockedIn = value.Time
			}
		case attendance.FieldClockedOut:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field clocked_out", values[i])
			} else if value.Valid {
				a.ClockedOut = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return (&AttendanceClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendance is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", a.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("clocked_in=")
	builder.WriteString(a.ClockedIn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("clocked_out=")
	builder.WriteString(a.ClockedOut.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance

func (a Attendances) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
