// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/winartodev/attencande-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// ClockedIn applies equality check predicate on the "clocked_in" field. It's identical to ClockedInEQ.
func ClockedIn(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockedIn), v))
	})
}

// ClockedOut applies equality check predicate on the "clocked_out" field. It's identical to ClockedOutEQ.
func ClockedOut(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockedOut), v))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...int64) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...int64) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDGT applies the GT predicate on the "employee_id" field.
func EmployeeIDGT(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDGTE applies the GTE predicate on the "employee_id" field.
func EmployeeIDGTE(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDLT applies the LT predicate on the "employee_id" field.
func EmployeeIDLT(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDLTE applies the LTE predicate on the "employee_id" field.
func EmployeeIDLTE(v int64) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmployeeID), v))
	})
}

// ClockedInEQ applies the EQ predicate on the "clocked_in" field.
func ClockedInEQ(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockedIn), v))
	})
}

// ClockedInNEQ applies the NEQ predicate on the "clocked_in" field.
func ClockedInNEQ(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClockedIn), v))
	})
}

// ClockedInIn applies the In predicate on the "clocked_in" field.
func ClockedInIn(vs ...time.Time) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClockedIn), v...))
	})
}

// ClockedInNotIn applies the NotIn predicate on the "clocked_in" field.
func ClockedInNotIn(vs ...time.Time) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClockedIn), v...))
	})
}

// ClockedInGT applies the GT predicate on the "clocked_in" field.
func ClockedInGT(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClockedIn), v))
	})
}

// ClockedInGTE applies the GTE predicate on the "clocked_in" field.
func ClockedInGTE(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClockedIn), v))
	})
}

// ClockedInLT applies the LT predicate on the "clocked_in" field.
func ClockedInLT(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClockedIn), v))
	})
}

// ClockedInLTE applies the LTE predicate on the "clocked_in" field.
func ClockedInLTE(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClockedIn), v))
	})
}

// ClockedOutEQ applies the EQ predicate on the "clocked_out" field.
func ClockedOutEQ(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockedOut), v))
	})
}

// ClockedOutNEQ applies the NEQ predicate on the "clocked_out" field.
func ClockedOutNEQ(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClockedOut), v))
	})
}

// ClockedOutIn applies the In predicate on the "clocked_out" field.
func ClockedOutIn(vs ...time.Time) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClockedOut), v...))
	})
}

// ClockedOutNotIn applies the NotIn predicate on the "clocked_out" field.
func ClockedOutNotIn(vs ...time.Time) predicate.Attendance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClockedOut), v...))
	})
}

// ClockedOutGT applies the GT predicate on the "clocked_out" field.
func ClockedOutGT(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClockedOut), v))
	})
}

// ClockedOutGTE applies the GTE predicate on the "clocked_out" field.
func ClockedOutGTE(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClockedOut), v))
	})
}

// ClockedOutLT applies the LT predicate on the "clocked_out" field.
func ClockedOutLT(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClockedOut), v))
	})
}

// ClockedOutLTE applies the LTE predicate on the "clocked_out" field.
func ClockedOutLTE(v time.Time) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClockedOut), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attendance) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attendance) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attendance) predicate.Attendance {
	return predicate.Attendance(func(s *sql.Selector) {
		p(s.Not())
	})
}
